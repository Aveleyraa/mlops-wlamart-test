[tool.poetry]
name = "walmart-pdm"
version = "0.1.0"
description = "Predictive maintenance pipeline (preprocessing + LightGBM training) with AWS SageMaker integration."
authors = ["cesar <cesar@ejemplo.com>"]
license = "MIT"
readme = "README.md"
packages = [
  { include = "walmart_pdm", from = "src" }
]

# Scripts CLI (equivalentes a los console_scripts que tenías en setup.py)
[tool.poetry.scripts]
get-pipeline-definition = "pipelines.get_pipeline_definition:main"
run-pipeline            = "pipelines.run_pipeline:main"

[tool.poetry.dependencies]
python = ">=3.10,<3.13"

# Core para preprocess/train locales
numpy          = "^1.26"
pandas         = "^2.2"
scikit-learn   = "^1.5"
lightgbm       = "^4.3"
joblib         = "^1.4"
pyarrow        = "^15.0"
s3fs           = "^2024.6.0"

# Si en cuadernos usas gráficos en local, puedes instalar con el grupo 'lab'
# (ver más abajo). Aquí dejamos core mínimo para pipelines.

# --- Grupos opcionales ---

# Herramientas de desarrollo (linters, tests, typing)
[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
pytest       = "^8.2"
pytest-cov   = "^5.0"
black        = "^24.8"
ruff         = "^0.6.0"
mypy         = "^1.11"
types-requests = "^2.32.0.20240907"

# Integración con AWS/SageMaker (útil para construir y ejecutar pipelines desde local/CI)
[tool.poetry.group.aws]
optional = true

[tool.poetry.group.aws.dependencies]
boto3      = "^1.34"
sagemaker  = ">=2.178.0,<3.0.0"
awscli     = "^1.33"
# opcional para registro de modelos, etc.
# mlflow   = "^2.14"

# Herramientas para notebooks / exploratorio
[tool.poetry.group.lab]
optional = true

[tool.poetry.group.lab.dependencies]
jupyterlab  = "^4.2"
ipykernel   = "^6.29"
matplotlib  = "^3.9"
seaborn     = "^0.13"

# ------------------------------
# Herramientas/formatters config
# ------------------------------

[tool.black]
line-length = 100
target-version = ["py310"]
skip-string-normalization = true

[tool.ruff]
line-length = 100
target-version = "py310"
extend-select = [
  "E", "F",      # pycodestyle/pyflakes
  "I",           # isort (orden de imports)
  "UP",          # pyupgrade
  "B",           # bugbear
]
ignore = [
  "E203",  # compatible con Black en slices
]
# Excluir directorios generados o pesados
exclude = [
  "notebooks/",
  ".venv/",
  "build/",
  "dist/",
  "**/.ipynb_checkpoints",
]

[tool.mypy]
python_version = "3.10"
ignore_missing_imports = true
strict = false
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true
exclude = '(notebooks|build|dist|.venv|.eggs|data)'

[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = "-q --maxfail=1 --disable-warnings"
filterwarnings = [
  "ignore::DeprecationWarning",
  "ignore::UserWarning",
]

# (Opcional) cobertura si usas coverage.py directamente además de pytest-cov
[tool.coverage.run]
branch = true
source = ["src/walmart_pdm", "pipelines"]

[tool.coverage.report]
show_missing = true
skip_covered = true
fail_under = 70

[build-system]
requires = ["poetry-core>=1.9.0"]
build-backend = "poetry.core.masonry.api"
